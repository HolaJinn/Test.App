# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Download ACE image
        run: |
          ########################################################################
          # 
          # We move the source to the build directory to make sure it is not in
          # the same directory as the downloaded install image. If the source 
          # stays where it is, then ibmint tries to scan it for projects!
          # 
          ########################################################################
          echo "Moving source to the build directory"
          mkdir build
          mv * build || /bin/true
          
          ########################################################################
          # 
          # Download ace-minimal image; could use ace-minimal-build but in our
          # case we already have Gradle and the various utilities contained in 
          # the build image, so we download the base image because it's smaller.
          # 
          ########################################################################
          curl -so moby-download-frozen-image-v2.sh https://raw.githubusercontent.com/moby/moby/master/contrib/download-frozen-image-v2.sh
          mkdir ace-minimal-download
          bash moby-download-frozen-image-v2.sh ace-minimal-download tdolby/experimental:ace-minimal-12.0.4.0-alpine
          mkdir ace-minimal-image-unzip
          cd ace-minimal-download && grep layer.tar manifest.json | tr -d '"' | tr -d ',' | xargs -n 1 tar -C ../ace-minimal-image-unzip -xf && cd - && rm -rf ace-minimal-download
          # Not actually running on Alpine, so we undo a hack
          sed -i 's/\/bin\/mksh/\/bin\/bash/g' ace-minimal-image-unzip/opt/ibm/ace-12/ace ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/mqsicreateworkdir ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/mqsipackagebar
          ########################################################################
          # 
          # Set up ACE environment and ensure downloaded image works
          # 
          ########################################################################
          export LICENSE=accept
          export MQSI_WORKPATH=$PWD/ace-minimal-image-unzip/var/mqsi
          . ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/mqsiprofile
          mqsilist
          #ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/mqsipackagebar -data $GITHUB_WORKSPACE/ace-projects -b $GITHUB_WORKSPACE/bar-files -a
          #ls -al ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/
          #ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/ibmint package --input-path ./Test.App --compile-maps-and-schemas --project --overrides-file ./Test.App/properties/DEV.properties --output-bar-file ./testbar.bar
          #ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/mqsicreatebar -data ./Test.App -b testbar.bar
      - name: build bar
        run: |
          export LICENSE=accept
          export MQSI_WORKPATH=$PWD/ace-minimal-image-unzip/var/mqsi
          . ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/mqsiprofile
          ### This command works ###
          ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/mqsipackagebar -w . -a testbar.bar -o build/Test.App/Test_Flow.msgflow -k build/Test.App
          ls -al
          ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/mqsiapplybaroverride -b testbar.bar -p build/Test.App/properties/DEV.properties -o ./testbar_DEV.bar -r
          ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/mqsiapplybaroverride -b testbar.bar -p build/Test.App/properties/QA.properties -o ./testbar_QA.bar -r
          
          git config --local user.email "benamor.yacine@yahoo.fr"
          git config --local user.name "HolaJinn"
          git add testbar.bar
          git commit -m "Add testbar.bar"
          git push
          
          #ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/ibmint package --input-path ./build/Test.App/ --output-bar-file ./testbar.bar --do-not-compile-java
          #pwd
          #ls -al
          #echo "listing"
          #ls -al ./build/Test.App
          #ls -al $MQSI_WORKPATH
      # Runs a set of commands using the runners shell
      #- name: Build/UT for ACE projects
        #run: |
          ########################################################################
          # 
          # Set up ACE environment
          # 
          ########################################################################
          #export LICENSE=accept
          #export MQSI_WORKPATH=$PWD/ace-minimal-image-unzip/var/mqsi
          #. ace-minimal-image-unzip/opt/ibm/ace-12/server/bin/mqsiprofile
          # Using ace-minimal without WXS support
          # 
          # Note that this no longer works as of 12.0.4, with ibmint optimize server 
          # being used instead.
          #export MQSI_NO_CACHE_SUPPORT=1
          ########################################################################
          # 
          # Run the Gradle build and unit test phases
          # 
          ########################################################################
          #cd build
          #echo "Running Gradle build and unit test"
          #gradle -PCLASSPATH=$CLASSPATH
